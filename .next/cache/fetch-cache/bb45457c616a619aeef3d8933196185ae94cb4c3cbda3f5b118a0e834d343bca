{"kind":"FETCH","data":{"headers":{"connection":"keep-alive","content-encoding":"gzip","content-type":"application/json; charset=utf-8","date":"Wed, 30 Aug 2023 12:12:07 GMT","etag":"\"eo6hywen0te6z\"","keep-alive":"timeout=5","transfer-encoding":"chunked","vary":"Accept-Encoding"},"body":"","status":200,"tags":["/page","/category/page","/search/page"],"url":"http://localhost:3000/api/staticData"},"revalidate":31536000}